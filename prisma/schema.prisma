// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId // @default(auto()) is used to generate a unique ID, @map("_id") is used to map the field to the _id field in MongoDB, @db.ObjectId is used to specify the type of the field
  //the differences between auto() and uuid() are that auto() generates a unique ID automatically, while uuid() generates a unique ID based on the UUID standard*.
  name           String?
  email          String?   @unique
  emailVerified  DateTime? // DateTime is used to store date and time
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now()) // the format is YYYY-MM-DDTHH:MM:SSZ
  updatedAt      DateTime  @updatedAt // the format is YYYY-MM-DDTHH:MM:SSZ
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // @@unique is used to specify that the combination of the provider and providerAccountId fields must be unique
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime @default(now()) // the format is YYYY-MM-DDTHH:MM:SSZ
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  userId        String   @db.ObjectId
  price         Int

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?  @db.ObjectId
  listingId  String?  @db.ObjectId
  startDate  DateTime // the format is YYYY-MM-DDTHH:MM:SSZ
  endDate    DateTime // the format is YYYY-MM-DDTHH:MM:SSZ
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  listing Listing? @relation(fields: [listingId], references: [id])
}

// *UUID standard:
// The UUID (Universally Unique Identifier) standard defines a way to generate unique values that can be used as identifiers in computer systems. 
// UUIDs are 128-bit numbers used to uniquely identify information in computer systems.
// The standard provides a mechanism for generating IDs that are unique across different machines, networks, and at different times, minimizing the risk of duplication. 
// UUIDs are represented as 32 hexadecimal digits, displayed in five groups separated by hyphens, in the form 8-4-4-4-12, for a total of 36 characters (including the hyphens).
// For example: `123e4567-e89b-12d3-a456-426614174000`.
